#define DESCRIPTOR_TABLES_H

#ifndef COMMON_H
#include "common.h"
#endif

struct gdt_entry {
    uint16_t  limit_low;
    uint16_t  base_low;
    uint8_t   base_middle;
    uint8_t   access_flags;   // determines the ring
    uint8_t   granularity;
    uint8_t   base_high;
} __attribute__((packed));
typedef struct gdt_entry gdt_entry_t;

struct gdt_ptr {
    uint16_t  limit;  // upper limit of all selector limits
    uintptr_t  base;   // address of first gdt_entry_t
} __attribute__((packed));
typedef struct gdt_ptr gdt_ptr_t;

struct idt_entry {
    uint16_t  base_low;
    uint16_t  selector;
    uint8_t   always0;
    uint8_t   flags;
    uint16_t  base_high;
} __attribute__((packed));
typedef struct idt_entry idt_entry_t;

struct idt_ptr {
    uint16_t  limit;
    uintptr_t  base;
} __attribute__((packed));
typedef struct idt_ptr idt_ptr_t;

// Initialisation function is publicly accessible.
void init_descriptor_tables();

// These extern directives let us access the addresses of our ASM ISR handlers.
extern void isr_0();
extern void isr_1();
extern void isr_2();
extern void isr_3();
extern void isr_4();
extern void isr_5();
extern void isr_6();
extern void isr_7();
extern void isr_8();
extern void isr_9();
extern void isr_10();
extern void isr_11();
extern void isr_12();
extern void isr_13();
extern void isr_14();
extern void isr_15();
extern void isr_16();
extern void isr_17();
extern void isr_18();
extern void isr_19();
extern void isr_20();
extern void isr_21();
extern void isr_22();
extern void isr_23();
extern void isr_24();
extern void isr_25();
extern void isr_26();
extern void isr_27();
extern void isr_28();
extern void isr_29();
extern void isr_30();
extern void isr_31();
extern void irq_0();
extern void irq_1();
extern void irq_2();
extern void irq_3();
extern void irq_4();
extern void irq_5();
extern void irq_6();
extern void irq_7();
extern void irq_8();
extern void irq_9();
extern void irq_10();
extern void irq_11();
extern void irq_12();
extern void irq_13();
extern void irq_14();
extern void irq_15();
