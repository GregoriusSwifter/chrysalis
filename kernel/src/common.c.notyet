#ifndef COMMON_H
#include "common.h"
#endif

#include <k/tty.h>

void bus_write(uint16_t port, uint8_t value) {
    __asm__ volatile ("outb %1, %0" : : "dN" (port), "a" (value));
}

uint8_t bus_read(uint16_t port) {
    uint8_t ret;
    __asm__ volatile ("inb %1, %0" : "=a" (ret) : "dN" (port));
    return ret;
}

uint16_t bus_readw(uint16_t port) {
    uint16_t ret;
    __asm__ volatile ("inw %1, %0" : "=a" (ret) : "dN" (port));
    return ret;
}

extern void panic(uint8_t *message, uint8_t *file, uint32_t line) {
    __asm__ volatile("cli");
    printf((uint8_t*)"KERNEL PANIC(%s) at %s: %d\n", message, file, line);
    for(;;);
}

extern void panic_assert(uint8_t *file, uint32_t line, uint8_t *desc) {
    __asm__ volatile("cli");
    printf((uint8_t*)"ASSERTION FAILED(%s) at %s: %d\n", desc, file, line);
    for(;;);
}

void *memset(void *s, int32_t c, uint32_t n) {
    uint8_t *p = s;
    while(n--) {
        *p++ = (uint8_t)c;
    }
    return s;
}

void reset(void) {
    uint64_t null_idtr = 0;
    __asm__("lidt %0; int3;" :: "m" (null_idtr));
}

void hang(void) {
    for(;;) {
        __asm__("hlt");
    }
}

// MONITOR STUFF
uint16_t *video_memory = (uint16_t *) 0x010B8000;
uint8_t cursor_x = 0;
uint8_t cursor_y = 0;

static void monitor_apply_cursor() {
    uint16_t pos = cursor_y * COLUMNS + cursor_x;
    bus_write(0x3D4, 14);       // Setting high byte for pos
    bus_write(0x3D5, pos >> 8); // Send high byte
    bus_write(0x3D4, 15);       // Setting low byte
    bus_write(0x3D5, pos);      // Send low byte
}

static void monitor_scroll() {
    uint8_t attr = (0 << 4) | (15 & 0x0F);
    uint16_t blank = 0x20 | (attr << 8);


    if (cursor_y >= LINES+1) {
        uint16_t i;
        for (i = 0; i < LINES*COLUMNS; ++i) {
            video_memory[i] = video_memory[i+COLUMNS];
        }

        for (i = LINES*COLUMNS; i < (LINES+1)*COLUMNS; ++i) {
            video_memory[i] = blank;
        }

        cursor_y = LINES;
        monitor_apply_cursor();
    }
}

void monitor_put(uint8_t c) {
    uint8_t bg = 0;
    uint8_t fg = 15;

    uint8_t attr = (bg << 4) | (fg & 0x0F);
    uint16_t attribute = attr << 8;
    uint16_t *loc;

    if (c == 0x08 && (uint8_t)cursor_x) { // backspace
        --cursor_x;
    } else if (c == 0x09) { // tab
        cursor_x = (cursor_x+8) & ~(8-1);
    } else if (c == '\r') {
        cursor_x = 0;
    } else if (c == '\n') {
        cursor_x = 0;
        ++cursor_y;
    } else if (c >= ' ') { // handle printables
        loc = video_memory + (cursor_y*COLUMNS+cursor_x);
        *loc = c | attribute;
        ++cursor_x;
    }

    if (cursor_x >= COLUMNS) {
        cursor_x = 0;
        ++cursor_y;
    }

    monitor_scroll();
    monitor_apply_cursor();
}

void monitor_clear() {
    uint8_t attr = (0 << 4) | (15 & 0x0F);
    uint16_t blank = 0x20 | (attr << 8);

    uint16_t i;
    for (i = 0; i < COLUMNS*(LINES+1); ++i) {
        video_memory[i] = blank;
    }

    cursor_x = 0;
    cursor_y = 0;
    monitor_apply_cursor();
}

void monitor_write(uint8_t *c) {
    uint64_t i = 0;
    while(c[i]) {
        monitor_put(c[i++]);
    }
}

/* Convert the integer D to a string and save the string in BUF. If
   BASE is equal to 'd', interpret that D is decimal, and if BASE is
   equal to 'x', interpret that D is hexadecimal. */
void itoa(uint8_t *buf, int32_t base, int32_t d) {
  uint8_t *p = buf;
  uint8_t *p1, *p2;
  uint32_t ud = d;
  int32_t divisor = 10;

  /* If %d is specified and D is minus, put `-' in the head. */
  if (base == 'd' && d < 0)
    {
      *p++ = '-';
      buf++;
      ud = -d;
    }
  else if (base == 'x')
    divisor = 16;

  /* Divide UD by DIVISOR until UD == 0. */
  do
    {
      int32_t remainder = ud % divisor;

      *p++ = (remainder < 10) ? remainder + '0' : remainder + 'a' - 10;
    }
  while (ud /= divisor);

  /* Terminate BUF. */
  *p = 0;

  /* Reverse BUF. */
  p1 = buf;
  p2 = p - 1;
  while (p1 < p2)
    {
      uint8_t tmp = *p1;
      *p1 = *p2;
      *p2 = tmp;
      p1++;
      p2--;
    }
}

// STRING STUFF
void printf(const uint8_t *format, ...) {
    uint8_t **arg = (uint8_t **) &format;
    uint8_t c;
    uint8_t buf[20];
    arg++;

    while ((c = *format++) != 0) {
        if (c != '%') {
            terminal_putchar(c);
        } else {
            uint8_t *p;

            c = *format++;
            switch (c) {
                case 'd':
                case 'u':
                case 'x':
                    itoa(buf, c, *((intptr_t *) arg++));
                    p = buf;
                    goto string;
                break;

                case 's':
                    p = *arg++;
                    if (!p) {
                        p = (uint8_t *)"(null)";
                    }

                string:
                    while (*p) {
                        terminal_putchar(*p++);
                    }
                break;

                default:
                    terminal_putchar(*((uintptr_t *) arg++));
                break;
            }
        }
    }
}
