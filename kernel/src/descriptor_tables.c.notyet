#ifndef COMMON_H
#include "common.h"
#endif

#ifndef DESCRIPTOR_TABLES_H
#include "descriptor_tables.h"
#endif

gdt_entry_t gdt_entries[5];
gdt_ptr_t   gdt_ptr;
idt_entry_t idt_entries[256];
idt_ptr_t   idt_ptr;

void  gdt_flush(uint64 gdt_ptr) {
    __asm__("lgdt %0;"
            "mov $0x10, %%ax;"
            "mov %%ax, %%ds;"
            "mov %%ax, %%es;"
            "mov %%ax, %%fs;"
            "mov %%ax, %%gs;"
            "mov %%ax, %%ss;"
            :
            : "m" (gdt_ptr)
            : "%eax");
    // FAR JUMP NECESSARY
    //__asm__("jmp 0x08:.flush");   // 0x08 is the offset to our code segment: Far jump!
}

void idt_flush(uint64 idt_ptr)  {
    __asm__("lidt %0;" : : "m" (idt_ptr));
}

static void gdt_set(uint8 num, uint32 base, uint32 limit, uint8 access_flags, uint8 gran) {
    gdt_entries[num].base_low     = (base & 0xFFFF);
    gdt_entries[num].base_middle  = (base >> 16) & 0xFF;
    gdt_entries[num].base_high    = (base >> 24) & 0xFF;

    gdt_entries[num].limit_low    = (limit & 0xFFFF);
    gdt_entries[num].granularity  = (limit >> 16) & 0x0f;

    gdt_entries[num].granularity |= gran & 0xF0;
    gdt_entries[num].access_flags = access_flags;
}

static void idt_set(uint8 num, uintptr base, uint16 selector, uint8 flags) {
    idt_entries[num].base_low = base & 0xFFFFF;
    idt_entries[num].base_high = (base >> 16) & 0xFFFF;

    idt_entries[num].selector = selector;
    idt_entries[num].always0 = 0;
    // We must uncomment the OR below when we get to using user-mode.
    // It sets the interrupt gate's privilege level to 3.
    idt_entries[num].flags   = flags /* | 0x60 */;
}

static void init_gdt() {
    gdt_ptr.limit   = (sizeof(gdt_entry_t)*5)-1;
    gdt_ptr.base    = (uintptr) &gdt_entries;

    gdt_set(0, 0,          0,    0,    0); // Null segment
    gdt_set(1, 0, 0xFFFFFFFF, 0x9A, 0xCF); // Code segment
    gdt_set(2, 0, 0xFFFFFFFF, 0x92, 0xCF); // Data segment
    gdt_set(3, 0, 0xFFFFFFFF, 0xFA, 0xCF); // User mode code segment
    gdt_set(4, 0, 0xFFFFFFFF, 0xF2, 0xCF); // User mode data segment

    gdt_flush((uintptr) &gdt_ptr);
}

static void init_idt() {
    idt_ptr.limit = sizeof(idt_entry_t) * 256 -1;
    idt_ptr.base = (uintptr) &idt_entries;

    // Remap the irq table
    bus_write(0x20, 0x11);
    bus_write(0xA0, 0x11);
    bus_write(0x21, 0x20);
    bus_write(0xA1, 0x28);
    bus_write(0x21, 0x04);
    bus_write(0xA1, 0x02);
    bus_write(0x21, 0x01);
    bus_write(0xA1, 0x01);
    bus_write(0x21, 0x00);
    bus_write(0xA1, 0x00);

    memset(&idt_entries, 0, sizeof(idt_entry_t)*256);
    idt_set( 0, (uintptr)isr_0 , 0x08, 0x8E);
    idt_set( 1, (uintptr)isr_1 , 0x08, 0x8E);
    idt_set( 2, (uintptr)isr_2 , 0x08, 0x8E);
    idt_set( 3, (uintptr)isr_3 , 0x08, 0x8E);
    idt_set( 4, (uintptr)isr_4 , 0x08, 0x8E);
    idt_set( 5, (uintptr)isr_5 , 0x08, 0x8E);
    idt_set( 6, (uintptr)isr_6 , 0x08, 0x8E);
    idt_set( 7, (uintptr)isr_7 , 0x08, 0x8E);
    idt_set( 8, (uintptr)isr_8 , 0x08, 0x8E);
    idt_set( 9, (uintptr)isr_9 , 0x08, 0x8E);
    idt_set(10, (uintptr)isr_10, 0x08, 0x8E);
    idt_set(11, (uintptr)isr_11, 0x08, 0x8E);
    idt_set(12, (uintptr)isr_12, 0x08, 0x8E);
    idt_set(13, (uintptr)isr_13, 0x08, 0x8E);
    idt_set(14, (uintptr)isr_14, 0x08, 0x8E);
    idt_set(15, (uintptr)isr_15, 0x08, 0x8E);
    idt_set(16, (uintptr)isr_16, 0x08, 0x8E);
    idt_set(17, (uintptr)isr_17, 0x08, 0x8E);
    idt_set(18, (uintptr)isr_18, 0x08, 0x8E);
    idt_set(19, (uintptr)isr_19, 0x08, 0x8E);
    idt_set(20, (uintptr)isr_20, 0x08, 0x8E);
    idt_set(21, (uintptr)isr_21, 0x08, 0x8E);
    idt_set(22, (uintptr)isr_22, 0x08, 0x8E);
    idt_set(23, (uintptr)isr_23, 0x08, 0x8E);
    idt_set(24, (uintptr)isr_24, 0x08, 0x8E);
    idt_set(25, (uintptr)isr_25, 0x08, 0x8E);
    idt_set(26, (uintptr)isr_26, 0x08, 0x8E);
    idt_set(27, (uintptr)isr_27, 0x08, 0x8E);
    idt_set(28, (uintptr)isr_28, 0x08, 0x8E);
    idt_set(29, (uintptr)isr_29, 0x08, 0x8E);
    idt_set(30, (uintptr)isr_30, 0x08, 0x8E);
    idt_set(31, (uintptr)isr_31, 0x08, 0x8E);
    // PICs
    idt_set(32, (uintptr)irq_0 , 0x08, 0x8E);
    idt_set(33, (uintptr)irq_1 , 0x08, 0x8E);
    idt_set(34, (uintptr)irq_2 , 0x08, 0x8E);
    idt_set(35, (uintptr)irq_3 , 0x08, 0x8E);
    idt_set(36, (uintptr)irq_4 , 0x08, 0x8E);
    idt_set(37, (uintptr)irq_5 , 0x08, 0x8E);
    idt_set(38, (uintptr)irq_6 , 0x08, 0x8E);
    idt_set(39, (uintptr)irq_7 , 0x08, 0x8E);
    idt_set(40, (uintptr)irq_8 , 0x08, 0x8E);
    idt_set(41, (uintptr)irq_9 , 0x08, 0x8E);
    idt_set(42, (uintptr)irq_10, 0x08, 0x8E);
    idt_set(43, (uintptr)irq_11, 0x08, 0x8E);
    idt_set(44, (uintptr)irq_12, 0x08, 0x8E);
    idt_set(45, (uintptr)irq_13, 0x08, 0x8E);
    idt_set(46, (uintptr)irq_14, 0x08, 0x8E);
    idt_set(47, (uintptr)irq_15, 0x08, 0x8E);

    idt_flush((uintptr) &idt_ptr);
}

// Initialisation routine - zeroes all the interrupt service routines,
// initialises the GDT and IDT.
void init_descriptor_tables() {
    init_gdt();
    init_idt();
}
