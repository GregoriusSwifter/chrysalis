[ORG 0x7C00]
[BITS 16]

%macro PUSHIT 0
	pushf
    push ds
    push es
    push di
    push si
%endmacro

%macro POPIT 0
    pop si
    pop di
    pop es
    pop ds
    popf
%endmacro

%macro PRINT 1
	mov si, %1
	xor cx, cx
	call PrintStr
%endmacro

%macro PRINT 2
	mov si, %1
	mov cx, %2
	call PrintStr
%endmacro

Boot:
	cli
	PRINT ProgressIndicator
	call CheckA20
	cmp ax, 0
	jnz .a20Enabled
	PRINT A20Indicator
	call EnableA20
	.a20Enabled:
	PRINT ProgressIndicator
	call GetMemMap
	PRINT ProgressIndicator
Halt:
	hlt
	jmp Halt

EnableA20:
	; First attempt BIOS setting A20
	mov ax, 0x2401
	int 0x15
	jc .retry
	cmp ah, 0
	jnz .retry
	done:
	ret
	.retry:
	; Now let's try using the keyboard controller
	call WaitKbd
	mov al, 0xd1 ; command write
	out 0x64, al
	call WaitKbd
	mov al, 0xdf ; A20 on
	out 0x60, al
	call WaitKbd
	jmp done

WaitKbd:
	in      al, 0x64
	test    al, 2
	jnz     WaitKbd
	ret

CheckA20:
;	Returns: 0 in ax if the a20 line is disabled (memory wraps around)
;	         1 in ax if the a20 line is enabled (memory does not wrap around)
	PUSHIT
	xor ax, ax	; 0x0000
	mov es, ax

	not ax		; 0xFFFF
	mov ds, ax

	mov di, 0x0500
	mov si, 0x0510

	mov al, byte[es:di]
	push ax

	mov al, byte[ds:si]
	push ax

	mov byte[es:di], 0x00
	mov byte[ds:si], 0xFF

	cmp byte[es:di], 0xFF

	pop ax
	mov byte[ds:si], al

	pop ax
	mov byte[es:di], al

	mov ax, 0
	je .checkA20Exit
	mov ax, 1

	.checkA20Exit:
	POPIT
	ret
	
PrintStr:
	push ax
	push bx
	push dx
	
	; Sets up the loop start so that if cx is 0
	; will loop over string until a zero char,
	; otherwise the loop incorporates cx as a counter
	; before the zero char check
	test cx, cx
	jz .useTilZero
	; using cx as counter
	mov dx, [.loopTilCount]
	jmp .loopTilCount
	; ignoring cx
	.useTilZero:
	mov dx, [.loopTilZero]
	
	; Loop over the string
	.loopTilCount:
	jcxz .loopDone
	dec cx
	.loopTilZero:
	mov al, [si]
	inc si
	test al, al
	jz .loopDone
	mov ah, 0x0E ; printing one char
	mov bx, 0x0007 ; bh: page number? bl: light grey on black 
	int 0x10
	jmp dx ; jump to either possible loop start
	
	.printStrDone:
	pop dx
	pop bx
	pop ax
	ret

GetMemMap:
	; use the INT 0x15, eax= 0xE820 BIOS function to get a memory map
	; inputs: es:di -> destination buffer for 24 byte entries
	; outputs: bp = entry count, trashes all registers except esi
	xor ebx, ebx				; ebx must be 0 to start
	xor bp, bp					; keep an entry count in bp

	.mm_loop:
	mov eax, 0x0000e820			; eax, ecx get trashed on every int 0x15 call
	mov ecx, 24					; Ask for 24 bytes (probably getting back 20)
	mov edx, 0x534D4150			; Put "SMAP" into edx
	mov [es:di + 20], dword 1	; force a valid ACPI 3.X entry

	int 0x15

	jc .mm_finish

	cmp eax, 0x534D4150			; Must be "SMAP"
	jne .mm_fail

	.mm_mid:
	jcxz .mm_next				; skip any 0 length entries

	cmp cl, 20					; got a 24 byte ACPI 3.X response?
	jbe .mm_store

	test byte [es:di + 20], 1	; if so: is the "ignore this data" bit clear?
	je .mm_next
	; intentional fallthrough

	.mm_store:
	mov ecx, [es:di + 8]		; get lower dword of memory region length
	or ecx, [es:di + 12]		; "or" it with upper dword to test for zero
	jz .mm_next					; if length qword is 0, skip entry
	inc bp						; got a good entry: ++count, move to next storage spot
	add di, 24
	; intentional fallthrough

	.mm_next:
	cmp ebx, 0
	jne .mm_loop	; If we're not done, loop
	; intentional fallthrough

	.mm_finish:
	;mov [mmap_ent], bp			; store the entry count
	clc							; there is "jc" on end of list to this point, so the carry must be cleared
	ret

	.mm_fail:
	stc
	ret

ProgressIndicator db '.', 0
A20Indicator db 'a', 0
times 510 - ($ - $$) db 0
dw 0xaa55
